/* The following code was generated by JFlex 1.4.3 on 3/8/25, 3:30 PM */

package Código;
import static Código.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/8/25, 3:30 PM from the specification file
 * <tt>C:/Users/Diego/Desktop/Sources/Analizador_Lexico/src/main/java/Código/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\42\2\0\1\3\22\0\1\3\7\0\1\47\1\50"+
    "\1\46\1\44\1\3\1\45\1\0\1\41\12\2\3\0\1\43\3\0"+
    "\1\1\1\30\1\1\1\35\1\31\1\1\1\32\1\1\1\33\4\1"+
    "\1\34\14\1\4\0\1\1\1\0\1\16\1\12\1\14\1\7\1\22"+
    "\1\23\1\27\1\25\1\13\1\36\1\37\1\6\1\4\1\15\1\5"+
    "\1\10\1\1\1\21\1\26\1\20\1\11\1\17\1\24\1\40\2\1"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\17\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\1\14\2\1\12\16\2\1\4"+
    "\1\0\33\2\1\0\13\2\1\3\11\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\51\0\51\0\51"+
    "\0\51\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453"+
    "\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\122\0\u0572"+
    "\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba"+
    "\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802"+
    "\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a"+
    "\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92"+
    "\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda"+
    "\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22"+
    "\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\51\0\u0e41"+
    "\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\1\3\1\15\3\3"+
    "\1\16\1\17\1\20\1\3\1\21\1\3\1\22\1\23"+
    "\4\3\1\24\2\3\1\25\1\5\1\26\1\27\1\30"+
    "\1\31\1\32\1\2\52\0\2\3\1\0\35\3\12\0"+
    "\1\4\51\0\1\5\36\0\1\5\7\0\2\3\1\0"+
    "\1\3\1\33\10\3\1\34\22\3\11\0\2\3\1\0"+
    "\1\3\1\35\5\3\1\36\25\3\11\0\2\3\1\0"+
    "\1\3\1\37\5\3\1\40\2\3\1\41\22\3\11\0"+
    "\2\3\1\0\5\3\1\42\4\3\1\43\2\3\1\44"+
    "\17\3\11\0\2\3\1\0\1\3\1\45\33\3\11\0"+
    "\2\3\1\0\11\3\1\46\5\3\1\47\15\3\11\0"+
    "\2\3\1\0\1\3\1\50\13\3\1\51\17\3\11\0"+
    "\2\3\1\0\14\3\1\52\20\3\11\0\2\3\1\0"+
    "\2\3\1\53\31\3\1\54\11\0\2\3\1\0\2\3"+
    "\1\55\2\3\1\56\27\3\11\0\2\3\1\0\12\3"+
    "\1\57\6\3\1\60\13\3\11\0\2\3\1\0\7\3"+
    "\1\61\11\3\1\62\13\3\11\0\2\3\1\0\25\3"+
    "\1\63\7\3\11\0\2\3\1\0\30\3\1\64\4\3"+
    "\11\0\2\3\1\0\5\3\1\65\27\3\51\0\1\66"+
    "\54\0\1\67\4\0\2\3\1\0\2\3\1\70\32\3"+
    "\11\0\2\3\1\0\7\3\1\71\25\3\11\0\2\3"+
    "\1\0\1\3\1\72\7\3\1\73\23\3\11\0\2\3"+
    "\1\0\11\3\1\74\23\3\11\0\2\3\1\0\5\3"+
    "\1\75\27\3\11\0\2\3\1\0\10\3\1\76\24\3"+
    "\11\0\2\3\1\0\14\3\1\47\20\3\11\0\2\3"+
    "\1\0\6\3\1\77\26\3\11\0\2\3\1\0\3\3"+
    "\1\100\4\3\1\101\1\102\3\3\1\103\17\3\11\0"+
    "\2\3\1\0\7\3\1\104\25\3\11\0\2\3\1\0"+
    "\1\3\1\105\33\3\11\0\2\3\1\0\12\3\1\106"+
    "\1\3\1\47\4\3\1\107\13\3\11\0\2\3\1\0"+
    "\2\3\1\110\32\3\11\0\2\3\1\0\16\3\1\111"+
    "\16\3\11\0\2\3\1\0\14\3\1\112\20\3\11\0"+
    "\2\3\1\0\22\3\1\113\12\3\11\0\2\3\1\0"+
    "\4\3\1\114\30\3\11\0\2\3\1\0\1\3\1\115"+
    "\33\3\11\0\2\3\1\0\11\3\1\116\23\3\11\0"+
    "\2\3\1\0\7\3\1\41\25\3\11\0\2\3\1\0"+
    "\7\3\1\117\25\3\11\0\2\3\1\0\1\120\34\3"+
    "\11\0\2\3\1\0\12\3\1\121\22\3\11\0\2\3"+
    "\1\0\26\3\1\122\6\3\11\0\2\3\1\0\31\3"+
    "\1\47\3\3\11\0\2\3\1\0\1\72\34\3\10\0"+
    "\42\66\1\0\6\66\2\0\1\123\47\0\2\3\1\0"+
    "\3\3\1\47\31\3\11\0\2\3\1\0\11\3\1\47"+
    "\23\3\11\0\2\3\1\0\4\3\1\47\30\3\11\0"+
    "\2\3\1\0\23\3\1\47\11\3\11\0\2\3\1\0"+
    "\33\3\1\47\1\3\11\0\2\3\1\0\6\3\1\117"+
    "\26\3\11\0\2\3\1\0\14\3\1\124\20\3\11\0"+
    "\2\3\1\0\2\3\1\102\32\3\11\0\2\3\1\0"+
    "\2\3\1\125\32\3\11\0\2\3\1\0\33\3\1\126"+
    "\1\3\11\0\2\3\1\0\7\3\1\116\25\3\11\0"+
    "\2\3\1\0\12\3\1\127\22\3\11\0\2\3\1\0"+
    "\13\3\1\111\21\3\11\0\2\3\1\0\2\3\1\47"+
    "\32\3\11\0\2\3\1\0\1\130\34\3\11\0\2\3"+
    "\1\0\16\3\1\131\16\3\11\0\2\3\1\0\2\3"+
    "\1\132\32\3\11\0\2\3\1\0\12\3\1\133\22\3"+
    "\11\0\2\3\1\0\16\3\1\134\16\3\11\0\2\3"+
    "\1\0\16\3\1\47\16\3\11\0\2\3\1\0\2\3"+
    "\1\135\32\3\11\0\2\3\1\0\12\3\1\41\22\3"+
    "\11\0\2\3\1\0\10\3\1\47\24\3\11\0\2\3"+
    "\1\0\2\3\1\113\32\3\11\0\2\3\1\0\6\3"+
    "\1\47\26\3\11\0\2\3\1\0\15\3\1\113\17\3"+
    "\11\0\2\3\1\0\27\3\1\136\5\3\12\0\1\123"+
    "\45\0\1\137\1\0\2\3\1\0\7\3\1\140\25\3"+
    "\11\0\2\3\1\0\1\3\1\141\33\3\11\0\2\3"+
    "\1\0\12\3\1\142\22\3\11\0\2\3\1\0\2\3"+
    "\1\143\32\3\11\0\2\3\1\0\1\3\1\144\33\3"+
    "\11\0\2\3\1\0\15\3\1\57\17\3\11\0\2\3"+
    "\1\0\16\3\1\145\16\3\11\0\2\3\1\0\14\3"+
    "\1\113\20\3\11\0\2\3\1\0\1\146\34\3\11\0"+
    "\2\3\1\0\1\3\1\147\33\3\11\0\2\3\1\0"+
    "\30\3\1\47\4\3\11\0\2\3\1\0\1\3\1\71"+
    "\33\3\11\0\2\3\1\0\10\3\1\74\24\3\11\0"+
    "\2\3\1\0\23\3\1\113\11\3\11\0\2\3\1\0"+
    "\2\3\1\150\32\3\11\0\2\3\1\0\13\3\1\47"+
    "\21\3\11\0\2\3\1\0\10\3\1\41\24\3\11\0"+
    "\2\3\1\0\4\3\1\41\30\3\11\0\2\3\1\0"+
    "\22\3\1\124\12\3\11\0\2\3\1\0\16\3\1\105"+
    "\16\3\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4018];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\4\11\35\1\1\0\33\1\1\0"+
    "\13\1\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return ERROR;
          }
        case 11: break;
        case 5: 
          { return Division;
          }
        case 12: break;
        case 7: 
          { return Suma;
          }
        case 13: break;
        case 6: 
          { return Igual;
          }
        case 14: break;
        case 10: 
          { lexeme=yytext(); return Reservadas;
          }
        case 15: break;
        case 9: 
          { return Multiplicacion;
          }
        case 16: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 17: break;
        case 8: 
          { return Resta;
          }
        case 18: break;
        case 4: 
          { /*Ignore*/
          }
        case 19: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 20: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
